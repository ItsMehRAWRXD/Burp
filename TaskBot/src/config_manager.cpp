#include "../include/task_bot.h"
#include <fstream>
#include <sstream>
#include <algorithm>

namespace TaskBot {

ConfigManager::ConfigManager(const std::string& configFile) : configFile_(configFile) {}

bool ConfigManager::load() {
    std::ifstream file(configFile_);
    if (!file.is_open()) {
        Logger::getInstance().warning("Config file not found: " + configFile_);
        return false;
    }
    
    config_.clear();
    std::string line;
    int lineNumber = 0;
    
    while (std::getline(file, line)) {
        lineNumber++;
        
        // Skip empty lines and comments
        line = Utils::trim(line);
        if (line.empty() || line[0] == '#' || line[0] == ';') {
            continue;
        }
        
        // Find key-value separator
        size_t pos = line.find('=');
        if (pos == std::string::npos) {
            Logger::getInstance().warning("Invalid config line " + std::to_string(lineNumber) + 
                                        ": " + line);
            continue;
        }
        
        std::string key = Utils::trim(line.substr(0, pos));
        std::string value = Utils::trim(line.substr(pos + 1));
        
        // Remove quotes if present
        if (value.length() >= 2) {
            if ((value.front() == '"' && value.back() == '"') ||
                (value.front() == '\'' && value.back() == '\'')) {
                value = value.substr(1, value.length() - 2);
            }
        }
        
        config_[key] = value;
        Logger::getInstance().debug("Loaded config: " + key + " = " + value);
    }
    
    file.close();
    Logger::getInstance().info("Loaded " + std::to_string(config_.size()) + 
                              " configuration entries from " + configFile_);
    return true;
}

bool ConfigManager::save() {
    std::ofstream file(configFile_);
    if (!file.is_open()) {
        Logger::getInstance().error("Failed to open config file for writing: " + configFile_);
        return false;
    }
    
    file << "# TaskBot Configuration File\n";
    file << "# Generated by TaskBot\n\n";
    
    // Sort keys for consistent output
    std::vector<std::string> keys = getKeys();
    std::sort(keys.begin(), keys.end());
    
    for (const auto& key : keys) {
        file << key << " = " << config_[key] << "\n";
    }
    
    file.close();
    Logger::getInstance().info("Saved configuration to " + configFile_);
    return true;
}

std::string ConfigManager::getString(const std::string& key, const std::string& defaultValue) const {
    auto it = config_.find(key);
    if (it != config_.end()) {
        return it->second;
    }
    return defaultValue;
}

int ConfigManager::getInt(const std::string& key, int defaultValue) const {
    auto it = config_.find(key);
    if (it != config_.end()) {
        try {
            return std::stoi(it->second);
        } catch (const std::exception& e) {
            Logger::getInstance().warning("Invalid integer value for config key " + key + 
                                        ": " + it->second);
        }
    }
    return defaultValue;
}

bool ConfigManager::getBool(const std::string& key, bool defaultValue) const {
    auto it = config_.find(key);
    if (it != config_.end()) {
        std::string value = it->second;
        std::transform(value.begin(), value.end(), value.begin(), ::tolower);
        
        if (value == "true" || value == "yes" || value == "1" || value == "on") {
            return true;
        } else if (value == "false" || value == "no" || value == "0" || value == "off") {
            return false;
        } else {
            Logger::getInstance().warning("Invalid boolean value for config key " + key + 
                                        ": " + it->second);
        }
    }
    return defaultValue;
}

double ConfigManager::getDouble(const std::string& key, double defaultValue) const {
    auto it = config_.find(key);
    if (it != config_.end()) {
        try {
            return std::stod(it->second);
        } catch (const std::exception& e) {
            Logger::getInstance().warning("Invalid double value for config key " + key + 
                                        ": " + it->second);
        }
    }
    return defaultValue;
}

void ConfigManager::setString(const std::string& key, const std::string& value) {
    config_[key] = value;
}

void ConfigManager::setInt(const std::string& key, int value) {
    config_[key] = std::to_string(value);
}

void ConfigManager::setBool(const std::string& key, bool value) {
    config_[key] = value ? "true" : "false";
}

void ConfigManager::setDouble(const std::string& key, double value) {
    config_[key] = std::to_string(value);
}

std::vector<std::string> ConfigManager::getKeys() const {
    std::vector<std::string> keys;
    for (const auto& pair : config_) {
        keys.push_back(pair.first);
    }
    return keys;
}

} // namespace TaskBot