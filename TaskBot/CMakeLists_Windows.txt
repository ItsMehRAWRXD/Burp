cmake_minimum_required(VERSION 3.10)
project(TaskBot)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set build type if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Compiler flags for Windows/MinGW
set(CMAKE_CXX_FLAGS "-Wall -Wextra")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

# Windows-specific definitions
add_definitions(-DWIN32_LEAN_AND_MEAN)
add_definitions(-DNOMINMAX)
add_definitions(-D_WIN32_WINNT=0x0601) # Windows 7 minimum

# Include directories
include_directories(${PROJECT_SOURCE_DIR}/include)

# Source files
set(SOURCES
    src/main_windows.cpp
    src/task_manager.cpp
    src/file_operations.cpp
    src/system_monitor_windows.cpp
    src/command_executor_windows.cpp
    src/logger.cpp
    src/config_manager.cpp
    src/scheduler.cpp
    src/utils.cpp
    src/input_simulator_windows.cpp
    src/window_manager_windows.cpp
    src/screen_capture_windows.cpp
    src/autopilot_manager_windows.cpp
    src/web_search.cpp
)

# Create executable
add_executable(taskbot ${SOURCES})

# Windows libraries
target_link_libraries(taskbot 
    # Windows system libraries
    kernel32
    user32
    gdi32
    winspool
    comdlg32
    advapi32
    shell32
    ole32
    oleaut32
    uuid
    odbc32
    odbccp32
    ws2_32
    dwmapi
    psapi
    
    # C++ standard libraries
    stdc++fs
    pthread
    
    # Additional libraries for MSYS2
    winpthread
)

# Find and link CURL (MSYS2 package: mingw-w64-x86_64-curl)
find_package(CURL REQUIRED)
if(CURL_FOUND)
    include_directories(${CURL_INCLUDE_DIRS})
    target_link_libraries(taskbot ${CURL_LIBRARIES})
else()
    message(FATAL_ERROR "CURL not found. Install with: pacman -S mingw-w64-x86_64-curl")
endif()

# Find and link JsonCpp (MSYS2 package: mingw-w64-x86_64-jsoncpp)
find_package(PkgConfig REQUIRED)
pkg_check_modules(JSONCPP REQUIRED jsoncpp)
if(JSONCPP_FOUND)
    include_directories(${JSONCPP_INCLUDE_DIRS})
    target_link_libraries(taskbot ${JSONCPP_LIBRARIES})
else()
    message(FATAL_ERROR "JsonCpp not found. Install with: pacman -S mingw-w64-x86_64-jsoncpp")
endif()

# Set Windows subsystem (GUI app that can still use console)
set_target_properties(taskbot PROPERTIES
    LINK_FLAGS "-mconsole"
)

# Installation
install(TARGETS taskbot DESTINATION bin)
install(FILES include/task_bot.h include/autopilot_windows.h include/ide_integration.h DESTINATION include)

# Create a static library version
add_library(taskbot_lib STATIC
    src/task_manager.cpp
    src/file_operations.cpp
    src/system_monitor_windows.cpp
    src/command_executor_windows.cpp
    src/logger.cpp
    src/config_manager.cpp
    src/scheduler.cpp
    src/utils.cpp
    src/input_simulator_windows.cpp
    src/window_manager_windows.cpp
    src/screen_capture_windows.cpp
    src/autopilot_manager_windows.cpp
    src/web_search.cpp
)

target_link_libraries(taskbot_lib 
    kernel32
    user32
    gdi32
    advapi32
    shell32
    ole32
    oleaut32
    dwmapi
    psapi
    ws2_32
    stdc++fs
    pthread
    winpthread
    ${CURL_LIBRARIES}
    ${JSONCPP_LIBRARIES}
)

# Install library
install(TARGETS taskbot_lib DESTINATION lib)

# Copy required DLLs to output directory (for MSYS2)
if(MSYS)
    add_custom_command(TARGET taskbot POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        $<TARGET_FILE:taskbot>
        ${CMAKE_CURRENT_BINARY_DIR}
    )
endif()

# Package configuration
include(CPack)
set(CPACK_PACKAGE_NAME "TaskBot")
set(CPACK_PACKAGE_VERSION "1.0.0")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "A self-sustained automation bot framework for Windows")
set(CPACK_PACKAGE_VENDOR "TaskBot Project")
set(CPACK_GENERATOR "ZIP")